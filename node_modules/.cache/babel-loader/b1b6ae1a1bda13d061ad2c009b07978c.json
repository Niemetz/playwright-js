{"ast":null,"code":"var _jsxFileName = \"/Users/john/trainings/udemy/react-app/src/ContactForm.react.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FIELDS = ['name', 'gender', 'phone', 'street', 'city'];\nexport class ContactForm extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      selectedOption: null\n    };\n    this.gender = {\n      selectedOption: null\n    };\n    this.GENDER_OPTIONS = [{\n      value: 'Male',\n      name: 'Male'\n    }, {\n      value: 'Female',\n      name: 'Female'\n    }, {\n      value: 'Other',\n      name: 'Other'\n    }];\n\n    this.setFormRef = form => {\n      this.formElement = form;\n    };\n\n    this.renderInput = (name, label, value) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ContactFormField\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          \"data-id\": `${name}-label`,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          \"data-id\": name,\n          name: name,\n          type: \"text\",\n          defaultValue: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.handleChange = selectedOption => {\n      this.setState({\n        selectedOption\n      });\n    };\n\n    this.renderSelect = (name, label, value) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ContactFormField\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          \"data-id\": `${name}-label`,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          defaultValue: value,\n          name: name,\n          \"data-id\": name,\n          onChange: this.handleChange,\n          children: this.GENDER_OPTIONS.map((e, key) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: e.value,\n              children: e.name\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 20\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this);\n    };\n\n    this.renderError = () => {\n      const {\n        error\n      } = this.state;\n      if (!error) return null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-id\": \"error-message\",\n        className: \"FormError\",\n        children: error.toString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }, this);\n    };\n\n    this.getInputValue = name => {\n      const input = this.formElement ? this.formElement.querySelector(`[name=\"${name}\"]`) : null;\n      return input ? input.value : null;\n    };\n\n    this.onSave = event => {\n      event.preventDefault();\n      this.setState({\n        error: null\n      }, () => {\n        const {\n          onSave\n        } = this.props;\n\n        if (!onSave) {\n          return;\n        }\n\n        try {\n          const existing = this.props.contact;\n          const contact = existing ? { ...existing\n          } : {};\n\n          for (const field of FIELDS) {\n            contact[field] = this.getInputValue(field);\n            assertTextValue(field, contact[field]);\n          }\n\n          onSave(contact);\n        } catch (err) {\n          this.setState({\n            error: err\n          });\n        }\n      });\n    };\n\n    this.onCancel = event => {\n      const {\n        onCancel\n      } = this.props;\n      if (onCancel) onCancel();\n    };\n  }\n\n  render() {\n    const contact = this.props.contact || {};\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"ContactForm\",\n      \"data-id\": \"contact-form\",\n      onSubmit: this.onSave,\n      ref: this.setFormRef,\n      children: [this.renderInput('name', 'Name', contact.name), this.renderSelect('gender', 'Gender', contact.gender), this.renderInput('phone', 'Phone', contact.phone), this.renderInput('street', 'Street', contact.street), this.renderInput('city', 'City', contact.city), this.renderError(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ContactFormButtons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          \"data-id\": \"save-button\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          \"data-id\": \"cancel-button\",\n          onClick: this.onCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction isEmpty(str) {\n  return !str || /^\\s*$/.test(str);\n}\n\nfunction assertTextValue(name, value) {\n  if (isEmpty(value)) {\n    throw new Error(`The \"${name}\" field can't be empty.`);\n  }\n}","map":{"version":3,"names":["React","FIELDS","ContactForm","Component","state","selectedOption","gender","GENDER_OPTIONS","value","name","setFormRef","form","formElement","renderInput","label","handleChange","setState","renderSelect","map","e","key","renderError","error","toString","getInputValue","input","querySelector","onSave","event","preventDefault","props","existing","contact","field","assertTextValue","err","onCancel","render","phone","street","city","isEmpty","str","test","Error"],"sources":["/Users/john/trainings/udemy/react-app/src/ContactForm.react.js"],"sourcesContent":["import React from 'react';\n\nconst FIELDS = ['name', 'gender', 'phone', 'street', 'city'];\n\nexport class ContactForm extends React.Component {\n  state = {\n    selectedOption: null,\n  }\n\n  gender = {\n    selectedOption: null,\n  }\n\n  GENDER_OPTIONS = [\n    { value: 'Male', name: 'Male' },\n    { value: 'Female', name: 'Female' },\n    { value: 'Other', name: 'Other' },\n  ];\n\n  render() {\n    const contact = this.props.contact || {};\n    return (\n      <form\n        className=\"ContactForm\"\n        data-id=\"contact-form\"\n        onSubmit={this.onSave}\n        ref={this.setFormRef}\n      >\n        {this.renderInput('name', 'Name', contact.name)}\n        {this.renderSelect('gender', 'Gender', contact.gender)}\n        {this.renderInput('phone', 'Phone', contact.phone)}\n        {this.renderInput('street', 'Street', contact.street)}\n        {this.renderInput('city', 'City', contact.city)}\n        {this.renderError()}\n        <div className=\"ContactFormButtons\">\n          <button type=\"submit\" data-id=\"save-button\">Save</button>\n          <button type=\"button\" data-id=\"cancel-button\" onClick={this.onCancel}>Cancel</button>\n        </div>\n      </form>\n    );\n  }\n\n  setFormRef = form => {\n    this.formElement = form;\n  };\n\n  renderInput = (name, label, value) => {\n    return (\n      <div className=\"ContactFormField\">\n        <label data-id={`${name}-label`}>{label}</label>\n        <input data-id={name} name={name} type=\"text\" defaultValue={value} />\n      </div>\n    );\n  };\n\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n  }\n\n  renderSelect = (name, label, value) => {\n    return (\n        <div className=\"ContactFormField\">\n        <label data-id={`${name}-label`}>{label}</label>\n        <select defaultValue={value} name={name} data-id={name} onChange={this.handleChange}>\n          {this.GENDER_OPTIONS.map((e, key) => {\n            return <option key={key} value={e.value}>{e.name}</option>;\n          })}\n        </select>\n        </div>\n  )};\n\n  renderError = () => {\n    const {error} = this.state;\n    if (!error) return null;\n\n    return <div data-id=\"error-message\" className=\"FormError\">{error.toString()}</div>;\n  };\n\n  getInputValue = name => {\n    const input = this.formElement\n      ? this.formElement.querySelector(`[name=\"${name}\"]`)\n      : null;\n    return input ? input.value : null;\n  };\n\n  onSave = event => {\n    event.preventDefault();\n    this.setState({error: null}, () => {\n      const {onSave} = this.props;\n      if (!onSave) {\n        return;\n      }\n      try {\n        const existing = this.props.contact;\n        const contact = existing ? {...existing} : {};\n        for (const field of FIELDS) {\n          contact[field] = this.getInputValue(field);\n          assertTextValue(field, contact[field]);\n        }\n        onSave(contact);\n      } catch (err) {\n        this.setState({error: err});\n      }\n    });\n  };\n\n  onCancel = event => {\n    const {onCancel} = this.props;\n    if (onCancel) onCancel();\n  };\n}\n\nfunction isEmpty(str) {\n  return (!str || /^\\s*$/.test(str));\n}\n\nfunction assertTextValue(name, value) {\n  if (isEmpty(value)) {\n    throw new Error(`The \"${name}\" field can't be empty.`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}